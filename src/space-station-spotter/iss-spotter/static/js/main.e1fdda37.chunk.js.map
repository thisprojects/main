{"version":3,"sources":["js-functions/js-functions.js","components/components.js","space-station-spotter.js","serviceWorker.js","index.js"],"names":["key","callSpaceStationApi","lat","lng","Promise","res","rej","fetch","then","r","json","data","response","reason","catch","getResults","source","selector","location","document","querySelector","value","results","geometry","e","console","log","locationApiCall","timer","setTimeout","navigator","geolocation","getCurrentPosition","pos","clearTimeout","coords","latitude","longitude","Errors","props","className","locationError","OverLay","style","overlayState","display","icon","faSatelliteDish","size","submitLocation","faSpinner","spin","GeoCode","onClick","MapResults","map","pass","index","faClock","timestamp","a","Date","year","getFullYear","month","getMonth","date","getDate","hour","getHours","min","getMinutes","sec","getSeconds","unixTimeConverter","risetime","DisplayResults","Array","isArray","reset","LocationInput","id","type","placeholder","SubmitButton","ChooseAnotherLocation","SpaceStationSpotter","state","spaceStationResults","toggleLoadingAnimation","classList","toggle","setOverlayState","setState","this","async","locationResult","initialCenter","center","google","zoom","position","name","Component","GoogleApiWrapper","apiKey","Boolean","window","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e1fdda37.chunk.js","sourcesContent":["import jsonp from \"jsonp\";\nexport const key = \"AIzaSyCyNv5BOZZfdKO3VDhQCOA3Ufm8tv8rCF8\";\n\nexport const GeoLocation = () => {\n  return new Promise((res, rej) => {\n    let timer = setTimeout(function() {\n      return rej(\"GeoLocation Time Out\");\n    }, 10000);\n    navigator.geolocation.getCurrentPosition(pos => {\n      clearTimeout(timer);\n      res({ lat: pos.coords.latitude, lng: pos.coords.longitude });\n    });\n  });\n};\n\nexport const unixTimeConverter = timestamp => {\n  let a = new Date(timestamp * 1000);\n  let months = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\"\n  ];\n  let year = a.getFullYear();\n  let month = months[a.getMonth()];\n  let date = a.getDate();\n  let hour = a.getHours();\n  let min = a.getMinutes();\n  let sec = a.getSeconds();\n  return ` ${date} / ${month} / ${year}  at  ${hour}:${min}:${sec}`;\n};\n\nexport const locationApiCall = selector => {\n  let location = document.querySelector(selector).value;\n  return fetch(\n    `https://maps.googleapis.com/maps/api/geocode/json?address=${location}&key=${key}`\n  )\n    .then(r => r.json())\n    .then(r => r.results[0].geometry.location)\n    .catch(e => {\n      console.log(\"Location API Error - Invalid Location ----->\", e);\n      return \"Location Error - Location is invalid.\";\n    });\n};\n\nexport const callSpaceStationApi = (lat, lng) => {\n  return new Promise((res, rej) => {\n    return fetch(\n      `https://cors-anywhere.herokuapp.com/http://api.open-notify.org/iss-pass.json?lat=${lat}&lon=${lng}&alt=20&n=3`\n    )\n      .then(r => r.json())\n      .then(data => {\n        // data.response is a succesful result array , data.reason is a string literal explaining why the request was unsuccesful.\n        return res(data.response || data.reason || \"Unknown Error\");\n      })\n      .catch(() => rej(\"Network Request Failed\"));\n  });\n};\n\nexport const getResults = source => {\n  return new Promise((res, rej) => {\n    if (source === \"api\") {\n      return res(locationApiCall(\"#location-input\"));\n    } else if (source === \"geo\") {\n      return res(GeoLocation());\n    }\n  });\n};\n","import React from \"react\";\nimport { unixTimeConverter } from \"./../js-functions/js-functions\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faClock } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSatelliteDish } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSpinner } from \"@fortawesome/free-solid-svg-icons\";\n\nexport const Errors = props => {\n  return (\n    <div className=\"location-error\">\n      {props.locationError ? (\n        <p>Error - Location Unavailable Or Unable To Acquire Geolocation</p>\n      ) : null}\n    </div>\n  );\n};\n\nexport const OverLay = props => {\n  return (\n    <div\n      className=\"overlay\"\n      style={props.overlayState ? { display: \"flex\" } : { display: \"none\" }}\n    >\n      <h1>Space Station Spotter</h1>\n      <span className=\"icon\">\n        <FontAwesomeIcon icon={faSatelliteDish} size=\"3x\" />\n      </span>\n      <GeoCode submitLocation={props.submitLocation} />\n      <h2>Or</h2>\n      <span className=\"controls\">\n        <LocationInput />\n        <SubmitButton submitLocation={props.submitLocation} />\n      </span>\n      <Errors locationError={props.locationError} />\n      <div className=\"loading toggle-hide\">\n        <FontAwesomeIcon icon={faSpinner} size=\"3x\" spin />\n      </div>\n    </div>\n  );\n};\n\nexport const GeoCode = props => {\n  return (\n    <div className=\"geocode\">\n      <button onClick={() => props.submitLocation(\"geo\")}>\n        Use Current Location\n      </button>\n    </div>\n  );\n};\n\nexport const MapResults = props => {\n  return props.results.map((pass, index) => (\n    <div className=\"result-row\" key={index}>\n      <p key={index + 1}>\n        {index + 1}\n        <span>\n          <FontAwesomeIcon icon={faClock} />\n        </span>\n        {unixTimeConverter(pass.risetime)}\n      </p>\n    </div>\n  ));\n};\n\nexport const DisplayResults = props => {\n  if (Array.isArray(props.results)) {\n    return (\n      <div className=\"results\">\n        <MapResults results={props.results} />\n        <ChooseAnotherLocation reset={props.reset} />\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        {props.results ? (\n          <div className=\"space-api-error\">\n            <p>Space Station Api Error</p>\n            <p>{props.results}</p>\n            <div>\n              <ChooseAnotherLocation reset={props.reset} />\n            </div>\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n};\n\nexport const LocationInput = () => {\n  return (\n    <div className=\"location-input-wrapper\">\n      <input id=\"location-input\" type=\"text\" placeholder=\"Choose Location\" />\n    </div>\n  );\n};\n\nexport const SubmitButton = props => {\n  return (\n    <div className=\"submit-button\">\n      <button onClick={() => props.submitLocation(\"api\")}>Submit</button>\n    </div>\n  );\n};\n\nexport const ChooseAnotherLocation = props => {\n  return (\n    <div className=\"choose-another-location\">\n      <button onClick={() => props.reset(true)}>Choose Another Location</button>\n    </div>\n  );\n};\n","import React, { Component } from \"react\";\nimport { Map, GoogleApiWrapper, Marker } from \"google-maps-react\";\nimport {\n  callSpaceStationApi,\n  getResults,\n  key\n} from \"./js-functions/js-functions\";\nimport { OverLay, DisplayResults } from \"./components/components.js\";\nimport \"./space-station.css\";\n\nexport class SpaceStationSpotter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lat: 52.489471,\n      lng: -1.898575,\n      locationError: false,\n      spaceStationResults: null,\n      overlayState: true\n    };\n  }\n  render() {\n    const toggleLoadingAnimation = () => {\n      let x = document.querySelector(\".loading\");\n      x.classList.toggle(\"toggle-hide\");\n    };\n\n    const setOverlayState = state => {\n      this.setState({ overlayState: state });\n    };\n\n    const setLocation = async source => {\n      toggleLoadingAnimation();\n      let locationResult = await getResults(source).catch(e => { \n                                                                this.setState({ locationError: true })\n                                                                toggleLoadingAnimation();\n                                                              });\n      // If a valid location is returned, set lat and lng then set call space station api. If location is invalid, display errors.\n      if (locationResult && locationResult.lat && locationResult.lng) {\n        this.setState({\n          lat: locationResult.lat,\n          lng: locationResult.lng,\n          spaceStationResults: await callSpaceStationApi(\n            locationResult.lat,\n            locationResult.lng\n          ).catch(e => e)\n        });\n        setOverlayState(false);\n        toggleLoadingAnimation();\n      } else {\n        this.setState({ locationError: true });\n      }\n    };\n\n    return (\n      <div id=\"page-wrapper\">\n        <OverLay\n          overlayState={this.state.overlayState}\n          submitLocation={setLocation}\n          locationError={this.state.locationError}\n        />\n        <div id=\"map\" className=\"map\">\n          <Map\n            initialCenter={{\n              lat: 52.489471,\n              lng: -1.898575\n            }}\n            center={{\n              lat: this.state.lat,\n              lng: this.state.lng\n            }}\n            google={this.props.google}\n            zoom={3}\n            className={\"map\"}\n          >\n            <Marker\n              position={{ lat: this.state.lat, lng: this.state.lng }}\n              name={\"Current location\"}\n            />\n          </Map>\n          <DisplayResults\n            reset={setOverlayState}\n            results={this.state.spaceStationResults}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: key\n})(SpaceStationSpotter);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SpaceStationSpotter from './space-station-spotter';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<SpaceStationSpotter />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}